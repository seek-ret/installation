{{ if .Values.injector.createNamespace }}
---
kind: Namespace
apiVersion: v1
metadata:
  name: {{ .Values.injector.namespace }}
  labels:
    name: {{ .Values.injector.namespace }}
{{ end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Values.name }}
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get","watch","list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Values.name }}
subjects:
  - kind: ServiceAccount
    name: {{ .Values.name }}
    namespace: {{ .Values.injector.namespace }}
roleRef:
  kind: ClusterRole
  name: {{ .Values.name }}
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.injector.namespace }}
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
---
apiVersion: v1
kind: Service
metadata:
  name: {{printf "%s-prod" .Values.name}}
  namespace: {{ .Values.injector.namespace }}
  labels:
    app: {{ .Values.name }}
spec:
  type: ClusterIP
  ports:
  - name: https
    port: 443
    targetPort: https
    protocol: TCP
  - name: http-metrics
    port: 80
    targetPort: http-metrics
    protocol: TCP
  selector:
    app: {{ .Values.name }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.injector.namespace }}
spec:
  ingress:
    - ports:
        - port: 9443
          protocol: TCP
  podSelector:
    matchLabels:
      app: {{ .Values.name }}
  policyTypes:
    - Ingress
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.injector.namespace }}
  labels:
    app: {{ .Values.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
    spec:
      serviceAccountName: {{ .Values.name }}
      volumes:
      - name: secrets
        secret:
          secretName: {{ .Values.name }}
      containers:
      - name: {{ .Values.name }}
        imagePullPolicy: IfNotPresent
        image: {{ .Values.injector.imageName }}
        command: ["entrypoint.sh"]
        args: []
        ports:
        - name: https
          containerPort: 9443
        - name: http-metrics
          containerPort: 9000
        volumeMounts:
        - name: secrets
          mountPath: /var/lib/secrets
        livenessProbe:
          httpGet:
            scheme: HTTPS
            path: /health
            port: https
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
        env:
        - name: "TLS_CERT_FILE"
          value: "/var/lib/secrets/sidecar-injector.crt"
        - name: "TLS_KEY_FILE"
          value: "/var/lib/secrets/sidecar-injector.key"
        - name: "LOG_LEVEL"
          value: "2"
        - name: "CONFIG_DIR"
          value: "conf/"
        - name: "CONFIGMAP_LABELS"
          value: {{printf "app=%s" .Values.name | quote}}
        - name: "ANNOTATION_NAMESPACE"
          value: {{ .Values.injector.annotaionNamespace | quote}}
---
apiVersion: v1
data:
  {{ if eq .Values.injector.namespace "seekret-injector" }}
  sidecar-injector.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZGVENDQXYyZ0F3SUJBZ0lVV282Y3Z6ZlZsWVE0UHJ4aEM4QkYwVHFnUWRjd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2dZd3hDekFKQmdOVkJBWVRBbFZUTVJFd0R3WURWUVFJREFoT1pYY2dXVzl5YXpFV01CUUdBMVVFQnd3TgpUbVYzSUZsdmNtc2dRMmwwZVRFUU1BNEdBMVVFQ2d3SGMyVmxhM0psZERFZ01CNEdBMVVFQXd3WGF6aHpMWE5wClpHVmpZWEl0YVc1cVpXTjBiM0l0UTBFeEhqQWNCZ2txaGtpRzl3MEJDUUVXRDI1MWJHeEFYMTlFVDAxQlNVNWYKWHpBZ0Z3MHlNREV4TVRFd056STJNVGRhR0E4ME56VTRNVEF3T0RBM01qWXhOMW93WXpFTE1Ba0dBMVVFQmhNQwpWVk14RVRBUEJnTlZCQWdNQ0U1bGR5QlpiM0pyTVF3d0NnWURWUVFIREFOT1dVTXhFREFPQmdOVkJBb01CM05sClpXdHlaWFF4SVRBZkJnTlZCQU1NR0hObFpXdHlaWFF0YzJsa1pXTmhjaTFwYm1wbFkzUnZjakNDQVNJd0RRWUoKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTUtwcmU3ZEtUNGJrTmVtcmd5Ylc5ODVoY25KR1NhTAptckpuTG5yeVpoWjFhTFAvb2lpMmVnTldVR0o1Tm53ODRFT0hmNmR4WDA3a2xiNWVUeEVHTWF1SHdlS25HQytnCjk1L3RMclZPU3FxSXdoUW4rUWYxTGgyblN6ejNjNHVMZnVNdm9MMjErUUQrTVFIRm9Vb2dUMHZXeWVHbVZtMCsKK1JXZDBlZThvYlgvbVREVm5aWC9rRHlnNzFmNU1CNDNrK2lLS0NWdEhKeGk0SHpCdUNQejZhRXlNUFBZYW1FRwpOUFVDNVgweGJOTzBYcUF0VzRRVUUyTDRBdldoeFczVzhJT1pIV2ZPc2NHNW4xemtHeWxFaytXcWtOVWp0NlJDCmdoRHkxY2xBSEdZOVZjMUhXU1lZN3RIc29FK3hydWloTU1FcEpxQ1c2SW1SdUdyNXpLaEM0elVDQXdFQUFhT0IKbERDQmtUQ0JqZ1lEVlIwUkJJR0dNSUdEZ2gxelpXVnJjbVYwTFhOcFpHVmpZWEl0YVc1cVpXTjBiM0l0Y0hKdgpaSUl1YzJWbGEzSmxkQzF6YVdSbFkyRnlMV2x1YW1WamRHOXlMWEJ5YjJRdWMyVmxhM0psZEMxcGJtcGxZM1J2CmNvSXljMlZsYTNKbGRDMXphV1JsWTJGeUxXbHVhbVZqZEc5eUxYQnliMlF1YzJWbGEzSmxkQzFwYm1wbFkzUnYKY2k1emRtTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBRGg0SVpxcGhhOG1tSFo5NzhnZUkyREdsNkxYLzZ1TAo1aURrMDdaTDZWTXByTG1qMDhIVFh1MkRsTmJjcHU3NFBWWjRLb1cwei85Z3VOMitBRUFQRzYzM0RuSmJYNlI5CnhESmo5b0VpdDdDdmswNy9BeGw1OFZQNnQ3NEp2Y1pKK3haZ2l6NmtBUGMrL1YyWm94RGpwbnpkVitKbk1Ga2sKL2R2K2RwZ3VKaHlpMTkvempjb2RUVk9tQUVQZHIzTm9ZTkxramlzOUQ1MnNVeDc0ZGxSWFAvYzJSM3RqcHh1Ywp6OFpEMGdBb3RIOUNYYUF1R0g1Y1oxcXIzVzJVSjR5OTBvdTVLYy80ZFVVNm0raitBdkJ4QmNhMHR6azc5V0RjClFHekVzZWlRMTIvV2h1T2lidEw0eXdMSVhlTytSbkk5Qjk3eit6czRualJoWklBTXFVdEpmUU5UR0UvYUhaQksKb0lScy8vWG9CYWdsenNLOEZSUE5CSFNFaEhaVkl0L1BEVGE2RC8rcmk4U3JiUFlXV29TUWFKSy9XUUNUcGZGZwpDSmlyZE1IaTE0YUJwenBUUlErSTc1MkxHSkpROXBweXVaWG1KK0xzczNJaDBPaThBWVBiUWJPSlA1bGgyZnFsCnJmQzFIeWJMWU9yRnoyQTNmVDNnSWdrL3RyVlFxcEtVRHRWdVNVSXMzMk5xc3ZROWpwcEVoTUtRaENNL0R3VTgKblhMbW96dDFQVnpveGhwV2VVTmQ5dVI5VGs4STR2cFdkU2NqVldPWnJmN0xVOVppRXUxNVltR2pzQkZVcWx5ZgpDdWhIVHhYU2NPNnp3bVU0WDZVVHhabE9NVGEzNUg1dmdCWDZHQllwaG5remRPcTJrVUUweTU5VEpiY2dLbHJPCnZ0VkVqNUhmdVI0VgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  sidecar-injector.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBd3FtdDd0MHBQaHVRMTZhdURKdGIzem1GeWNrWkpvdWFzbWN1ZXZKbUZuVm9zLytpCktMWjZBMVpRWW5rMmZEemdRNGQvcDNGZlR1U1Z2bDVQRVFZeHE0ZkI0cWNZTDZEM24rMHV0VTVLcW9qQ0ZDZjUKQi9VdUhhZExQUGR6aTR0KzR5K2d2Ylg1QVA0eEFjV2hTaUJQUzliSjRhWldiVDc1RlozUjU3eWh0ZitaTU5XZApsZitRUEtEdlYva3dIamVUNklvb0pXMGNuR0xnZk1HNEkvUHBvVEl3ODlocVlRWTA5UUxsZlRGczA3UmVvQzFiCmhCUVRZdmdDOWFIRmJkYndnNWtkWjg2eHdibWZYT1FiS1VTVDVhcVExU08zcEVLQ0VQTFZ5VUFjWmoxVnpVZFoKSmhqdTBleWdUN0d1NktFd3dTa21vSmJvaVpHNGF2bk1xRUxqTlFJREFRQUJBb0lCQVFDRWRaZVFhVmV1Rm0zYQpBR2FBMTVxTmJBUDR5ZWxlVERLbzRRTkV6L3JkbjJqdXlxMWFUTWo3eWxrS21QYVZWWXM1Q0ZPNTZiQno2NkZsCmw2RHZzYXBNMFNVQ2lMY3hlYlBtVkN1clhhbjdIdklKYXlYTzMyeFE2MHlNSU1tMEUrajB5S3oxU29VMHdzTXcKTkgzTEJlOVBhTW1ZeldvVURuekowOGxJaWhmejBkWDRyWjBydytlMk83YWFCNWJvbVMyeFF6N1FQOXVjV3VkNQppQWRyTzR0YXV6cjJBS1pJYUpCL2RweEE5WEJLWmVEWVhPV0xibmg0SWxXOXdFS1F0ZkpvanRoWmNXb0Z3ZDNzClN1RXZQQ3N3TjNHTlpCYjBxNXNBOGRTU2NBb1g0MmtySXVhOUNuZE5aK09QeGxkYlhZcE1EY21lTGpTdE5jWDkKa0toY2prK0ZBb0dCQVAxbTN5bmVRbWNqaEhBMUxMQzRLbnJPVSt6VzlxYzMwR1NpTklqNVRXa1hiR1QzeUt3VQpuRnFkRFl2UUFySCtjb2k0bzgzem9jZzFsRFFCR2RKUmM3TGcyMjZzQWFGU2FOb0xaVktlQ1NiNURKb0RXRm9aClFnYlN6bUVaeUVhc296UDdiS0JiZFFxRGJZUzV0TjJsZ1VPN2ZRQUFRU3dSRUZoV2VmLy9aK2YvQW9HQkFNU28Kb1RNdUpLU01RNjYrYXh3SXlLeTZ6R2QwU2dRWWw4L2dMaHFPZDZUeTdMeWNMZVFmWnhZa2pSWVVCVVVsbWRxbApEclNtV0xuT1NCQ21USHkzeHBqN2REb1o0bU0vUUNBQVBwemJpOU5Ed1VsKzlGdFJLQ2FJTDEyWjRzZEE1SDZ5CjRqbTRFQVpRZk1XRGtvcXpkTnFDM2lMQjRqczV1dFpNa2JqTlFoVExBb0dBVjNJZ29Qb3FRQjFwbnE4NjlPRVoKQjdnY0RpZEFod1FqemhhTHVwa050YTUzb1lCQXArR1U4MUF2VklnNzVlREE5WjJDS1poaHhBMTVUMWp4NkRwagppdDg5Mmp0UmRMSlRyS3N5RkFpbGIrV1NDN1FMMFV2V0ZUUzZNNWdLSFJtR1dISHpVb005S0p1aU42TStYeDYyCk5RR0dhWEd0QzkvM25BUjdwWFFtRDFFQ2dZQWtWVE5URFZkZnZ6cFI4b1EvYmJBRm1ZMWlINjM5Qzc0Z2ZiNkcKMFlOeFNpQkt5R0FDSVhzZU1DcVF4YW9qbUVyUWhtWXRJZjZLZFg0QzlYWjBKRS9ndTdSQmQ3N0hyMHZkbmEzegp0T3drWUFRNTIrYXhhRkVPcldKeTNKZDFVSnZtZkk0bk04WmlKRVNwQ1NIdDFqSGtuUUVGVXVURkpHbE1abUVWCnozWkIrUUtCZ0YrUW1nYUdreUpEOWlCZlZ4YU9vYVU5U01zcVpqL1h4VVBJZlRMZUpQV05uUjJXejFTQnVhRTQKeEJpdGlPTjc3Z1pod0xTQmRJbFhqUkY3L2NVMHRWZWVHK1BmYjg4U09OVDZOaHZvSjJuQ2ZZK0xGaDdONU9YSwpLZ3V3T20vS21ud3hqMGNaL3NwNmxSNy9xS2JNOU5hOTRTbyt2L1FCQ0orWVBROUZJU2gxCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  {{ else }}
  sidecar-injector.crt: {{ required "A custom certificate is required!" .Values.injector.customSidecarCert }}
  sidecar-injector.key: {{ required "A custom key is required!" .Values.injector.customSidecarKey }}
  {{ end }}
kind: Secret
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.injector.namespace }}
type: Opaque
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: {{printf "%s-webhook" .Values.name}}
  labels:
    app: {{ .Values.name }}
webhooks:
- name: {{ .Values.injector.annotaionNamespace }}
  failurePolicy: "Ignore" # we fail "open" if the webhook is down hard
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  clientConfig:
    service:
      name: {{printf "%s-prod" .Values.name}}
      namespace: {{ .Values.injector.namespace }}
      path: "/mutate"   # what /url/slug to send requests at
{{ if eq .Values.injector.namespace "seekret-injector" }}
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZvekNDQTRzQ0ZEK0VNYXZ0bGxCSlgreXgvU3lEYW1lMmg5VUtNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1JR00KTVFzd0NRWURWUVFHRXdKVlV6RVJNQThHQTFVRUNBd0lUbVYzSUZsdmNtc3hGakFVQmdOVkJBY01EVTVsZHlCWgpiM0pySUVOcGRIa3hFREFPQmdOVkJBb01CM05sWld0eVpYUXhJREFlQmdOVkJBTU1GMnM0Y3kxemFXUmxZMkZ5CkxXbHVhbVZqZEc5eUxVTkJNUjR3SEFZSktvWklodmNOQVFrQkZnOXVkV3hzUUY5ZlJFOU5RVWxPWDE4d0lCY04KTWpBeE1URXhNRGN5TmpBeVdoZ1BORGMxT0RFd01EZ3dOekkyTURKYU1JR01NUXN3Q1FZRFZRUUdFd0pWVXpFUgpNQThHQTFVRUNBd0lUbVYzSUZsdmNtc3hGakFVQmdOVkJBY01EVTVsZHlCWmIzSnJJRU5wZEhreEVEQU9CZ05WCkJBb01CM05sWld0eVpYUXhJREFlQmdOVkJBTU1GMnM0Y3kxemFXUmxZMkZ5TFdsdWFtVmpkRzl5TFVOQk1SNHcKSEFZSktvWklodmNOQVFrQkZnOXVkV3hzUUY5ZlJFOU5RVWxPWDE4d2dnSWlNQTBHQ1NxR1NJYjNEUUVCQVFVQQpBNElDRHdBd2dnSUtBb0lDQVFERklmVys3NFBLSGlPZjltOTB1aUNvTGRLQmMya0lUSW5PMHpBaWszM3cyUlVhCm5FeG4rYWJFU1pmVHdZZXdEa3o0RytCL2RDZnN5RlRsb1RiN1dCcE9aNGhqckVEK3I4ZE1NWGNURDA1alNOMG8KbnNVTWEzMVh6dkV3ZUFBVDNrUlRmcEtUb3M0cjRDY1hqQkVhWmFPWmNIMEtiQ005WWxGS3pLRkljdTl2QlJnQQo4NVhLOGhqd1lzMy9GOVIwT0JEM01oak82dW9iRnVTTnpvV2tjb29QczZWZjZnWE1nNlhMbG1EcjM0V0RQa21GCjlNaVJMNUlvQStzK0VNOGtkV0FuTkFCTEcweS90aXNib3NpVXY5bVdwZlRMS0ZDZWNCQWwrRzJXSU9UWkFIOGoKWDFXcXlxYXJYTHBIZnloL0pJbi9UY3N1VnZCcGtBM2JVRHRmQ01KTGxtOGw1dllwNHNCQkJNeGwyb0VpSVlBaQp2cjZQRFpFZmhTNEp0REt3N3U1SGtHU01JVmtXSFIxcjlRNmlHL0dqNVZlYUsyVjVMZXFSRHkxRW1FSmRYeGlaCkhwQXFob0IyYWxFSGwxTFhjQnk5b2NMcCtLcXJUTEpUYXpURWRhblA4bEIyZkhwRXoyVU5Kdit0Ulo3NHoyWEoKVW5oUXB0RDdDb3hMWlJPc1VXb3FlMWNEOXVkaXllOVVnT1BtYWRRZ2ZaYWhLaUwzdU1YaUdrNzdsdkVvVG5iagpRbklTTStpdklZYWlCVkRKYnFib0IzOTd2ZHNCc3dmNjdSS1hTVmVpUFg5UXJIbTBjNUNaUkVLQTJoR1RJaGcwCndnZVNuTGNTazdNOUhHWE9RVGsrdHo0UDE0RXJYdStTd1gvQXRQQml2SWFuU3U4WGc2dFF1MTdFU09SVUJ3SUQKQVFBQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQ0FRQTlDODc1bFMyZWxKdU1aaFNUdlRLUlZZTE9CQkVpQS83awo3YitZMGhKenFNOWVtcmxsSkZRUXRMajltUFJQVis4SVBkc3lkVFFQNmVoNDZtVU13NEE5eVpudGMwN1JleklUCnM3TW1uaUl4ZUVqZkQ1Mk00TFJwdTJGZUxiYmtaWkltdHdSeWk0MGpyZHJMb01VTUhsazRDdmREQUhsZVl5MUMKTlgzMDBLNDJ2TnFablNPWjU0NGNodmE0NzhPY3JsbW0zSGt6UW15ZVM2OVVkajBqWllwZzFDd1NvTXZxSjZGMwpqeVNBRDN5THVFS2JuY01RWlNIeU92Mlo2NXc3cDFQejRieEwyZTVjYzl6VjZGL09vZHR3K3J6NitSYU1GSHcyClQ1d0ZvcUVjd2loVUdSbFcrTTU0a1ROMzRPMk9HcWMvK0ZUaHJSRnpObWdRZUJiakJWRFFEOUd3c01uYUYxakUKVk1lcmxxUTJMTHJtUm80RVQ1dS9YVFd4VDFmZ1lQRUlMY2ZjVllUcjI5QmZ4aXdmeGpnTHJQc2RqWHRBYVh2SgoxSGYrekVQMmJKQkplN0dkOENEYi95eXNTdWJIZlNGUCtXMWVuRklPaXJ4d2VacWlMRGUxZGQ2a1liQzZBUjRTCkRUMzdXVzBjeGdDT2hmcjFpVU5XUUFZaGtIbGVLalhkOFhKUmdpbEJzUEVpZ0cvTUlabVlreURiWTU2clhXMzMKNnR6MzR6ejZKS0Mzc3l5QTF2Z1YrVlFUK3VpOGdlSzVFSUVsUjVvWEJGT2JpbUVtSnJvdCtzSDR3aTJJTVNjaQpoZmdTY3hDVVBib3B1UVZGeE40K29NL0hJaHJaaU9sYlFpRjUvcm5oSFNMaDVqZHZkaU9adUVFNEhOVVV4WmFtCnVVQXZVQ2pHYkE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
{{ else }}
    caBundle: {{ required "A custom ca is required!" .Values.injector.customSidecarCa }}
{{ end }}
  timeoutSeconds: 5
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.injector.namespace }}
  labels:
    app: {{ .Values.name }}
data:
  sniffer: |
    name: sniffer
    {{ if .Values.tlsProxy.enabled }}
    volumes:
    - name: certs
      secret:
        secretName: {{ .Values.tlsProxy.certsSecretName | quote }}
    initContainers:
    - name: init-net
      image: {{ .Values.tlsProxy.initImage }}
      env:
      - name: TARGET_PORT
        value: {{ .Values.tlsProxy.targetPort }}
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
        privileged: true
        runAsUser: 0
        runAsNonRoot: false
      resources:
        limits:
          cpu: 100m
          memory: 50Mi
        requests:
          cpu: 10m
          memory: 10Mi
    {{ end }}
    containers:
    - name: sniffer
      env:
      - name: S3_URL
        value: {{ .Values.s3.s3URL | quote }}
      - name: BUCKET_NAME
        value: {{required "A target bucket name is required!" .Values.s3.bucketName }}
      - name: FOLDER_NAME
        value: {{ .Values.s3.folderName }}
      {{ if .Values.s3.keyAuth }}
      - name: ACCESS_KEY
        value: {{required "An access key ID is required with keyAuth authentication!" .Values.s3.accessKey }}
      - name: SECRET_ACCESS_KEY
        value: {{required "A secret key is required with keyAuth authentication!" .Values.s3.secretKey }}
      {{ end }}
      - name: REGION
        value: {{ .Values.s3.region }}
      - name: PREFIX
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: ROTATION_SECONDS
        value: {{ .Values.rotationSeconds }}
    {{ if .Values.tlsProxy.enabled }}
      - name: BPF_FILTER
        value: "tcp port 9080"
    {{ else }}
      - name: BPF_FILTER
        value: {{ .Values.bpfFilter | quote}}
    {{ end }}
      - name: MAX_FILE_SIZE
        value: {{ .Values.maxFileSize }}
      image: {{ .Values.image }}
      imagePullPolicy: Always
      securityContext:
          capabilities:
            add:
              - NET_ADMIN
          privileged: true
          runAsUser: 0
          runAsNonRoot: false
      resources:
        limits:
          cpu: {{ .Values.sniffer.limitCpu }}
          memory: {{ .Values.sniffer.limitMemory }}
        requests:
          cpu: {{ .Values.sniffer.requestCpu }}
          memory: {{ .Values.sniffer.requestMemory }}
    {{ if .Values.tlsProxy.enabled }}
    - name: envoy-tls-proxy
      image: {{ .Values.tlsProxy.envoyImage }}
      imagePullPolicy: Always
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        privileged: true
        runAsUser: 0
        runAsNonRoot: false
      resources:
        limits:
          cpu: {{ .Values.tlsProxy.limitCpu }}
          memory: {{ .Values.tlsProxy.limitMemory }}
        requests:
          cpu: {{ .Values.tlsProxy.requestCpu }}
          memory: {{ .Values.tlsProxy.requestMemory }}
      env:
      - name: ENVOY_ADMIN_PORT
        value: {{ .Values.tlsProxy.adminPort }}
      - name: ENVOY_TARGET_ADDRESS
        value: {{ .Values.tlsProxy.targetAddress }}
      - name: ENVOY_TARGET_PORT
        value: {{ .Values.tlsProxy.targetPort }}
      ports:
      - containerPort: 9443
      - containerPort: 9080
      volumeMounts:
      - name: certs
        mountPath: /etc/envoy/cert.pem
        subPath: tls.crt
        readOnly: true
      - name: certs
        mountPath: /etc/envoy/key.pem
        subPath: tls.key
        readOnly: true
    {{ end }}
